# bincrafters-conventions:gha-workflow-version:4
# You can add custom environment variables above the version tag
# Do not modify the tag or anything below the tag
# This script gets automatically updated

# Possible configurations:
# env:
#   splitByBuildTypes: "false"  # Possible values "false", "true", default: false
#   recipeType: "" # Possible values "" (for libraries), "header_only", "installer": default ""

# - IMPORTANT NOTICE: These configurations are actually not completely working as expected yet due to GHA limitations
# but it is important to set this values already so they can be consumed later

# You can furthermore set any environment variable understood by Conan and Conan Package Tools

on: [push, pull_request]

jobs:
  conan:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "GCC 4.9 Debug", compiler: "GCC", version: "4.9", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "GCC 4.9 Release", compiler: "GCC", version: "4.9", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "GCC 5 Debug", compiler: "GCC", version: "5", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "GCC 5 Release", compiler: "GCC", version: "5", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "GCC 6 Debug", compiler: "GCC", version: "6", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "GCC 6 Release", compiler: "GCC", version: "6", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "GCC 7 Debug", compiler: "GCC", version: "7", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "GCC 7 Release", compiler: "GCC", version: "7", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "GCC 8 Debug", compiler: "GCC", version: "8", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "GCC 8 Release", compiler: "GCC", version: "8", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "GCC 9 Debug", compiler: "GCC", version: "9", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "GCC 9 Release", compiler: "GCC", version: "9", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "CLANG 3.9 Debug", compiler: "CLANG", version: "3.9", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "CLANG 3.9 Release", compiler: "CLANG", version: "3.9", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "CLANG 4.0 Debug", compiler: "CLANG", version: "4.0", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "CLANG 4.0 Release", compiler: "CLANG", version: "4.0", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "CLANG 5.0 Debug", compiler: "CLANG", version: "5.0", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "CLANG 5.0 Release", compiler: "CLANG", version: "5.0", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "CLANG 6.0 Debug", compiler: "CLANG", version: "6.0", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "CLANG 6.0 Release", compiler: "CLANG", version: "6.0", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "CLANG 7.0 Debug", compiler: "CLANG", version: "7.0", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "CLANG 7.0 Release", compiler: "CLANG", version: "7.0", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "CLANG 8 Debug", compiler: "CLANG", version: "8", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "CLANG 8 Release", compiler: "CLANG", version: "8", os: "ubuntu-18.04", buildType: "Release", recipeType: "" }
          - { name: "CLANG 9 Debug", compiler: "CLANG", version: "9", os: "ubuntu-18.04", buildType: "Debug", recipeType: "" }
          - { name: "CLANG 9 Release", compiler: "CLANG", version: "9", os: "ubuntu-18.04", buildType: "Release", recipeType: ""  }
          - { name: "Header-only Linux", compiler: "CLANG", version: "8", os: "ubuntu-18.04", recipeType: "header_only" }
          - { name: "Header-only Windows", compiler: "VISUAL", version: "16", os: "windows-latest", recipeType: "header_only" }
          - { name: "Installer Linux", compiler: "GCC", version: "7", os: "ubuntu-18.04", dockerImage: "conanio/gcc7-centos6", recipeType: "installer" }
          - { name: "Installer Windows", compiler: "VISUAL", version: "16", os: "windows-2019", recipeType: "installer" }
          - { name: "Installer macOS", compiler: "APPLE_CLANG", version: "11.0", os: "macos-10.15", recipeType: "installer" }
    name: ${{ matrix.config.name }}
    # # FIXME: GHA will support accessing env variables here in the future
    # if: (env.splitByBuildTypes != 'true' or matrix.buildType != '') and env.recipeType == matrix.config.recipeType
    steps:
      - uses: actions/checkout@v2
        if: env.recipeType == matrix.config.recipeType
      - uses: actions/setup-python@v1
        with:
          python-version: "3.8"
        if: env.recipeType == matrix.config.recipeType
      - name: Install Conan
        run: |
          pip install bincrafters_package_tools
          conan user
          echo "::set-env name=CONAN_${{ matrix.config.compiler }}_VERSIONS::${{ matrix.config.version }}"
          echo "export CONAN_${{ matrix.config.compiler }}_VERSIONS=${{ matrix.config.version }}"
          compiler="${{ matrix.config.compiler }}"
          version="${{ matrix.config.version }}"
          docker_image="${{ matrix.config.dockerImage }}"
          if [[ "${compiler}" == "GCC" ]] || [[ "${compiler}" == "CLANG" ]]; then
            if [[ "${docker_image}" == "" ]]; then
              compiler_lower="${compiler,,}"
              version_withoutdot="${version//./}"
              docker_image="conanio/${compiler_lower}${version_withoutdot}"
            fi
            echo "::set-env name=CONAN_DOCKER_IMAGE::${docker_image}"
            echo "export CONAN_DOCKER_IMAGE=${docker_image}"
          fi
          build_type="${{ matrix.config.buildType }}"
          if ! [[ "${build_type}" == "" ]]; then
            echo "::set-env name=CONAN_BUILD_TYPES::${build_type}"
            echo "export CONAN_BUILD_TYPES=${build_type}"
          fi
          if [[ "${compiler}" == "APPLE_CLANG" ]] && [[ "${version}" == "11.0" ]]; then
            sudo xcode-select -switch "/Applications/Xcode_11.3.1.app"
            clang++ --version
          fi
        shell: bash
        if: env.recipeType == matrix.config.recipeType
      - name: Run
        env:
          CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
          CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
        run: |
          bincrafters-package-tools --auto
        if: env.recipeType == matrix.config.recipeType
